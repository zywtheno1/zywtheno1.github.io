<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Bambooleaf's blog]]></title>
  <subtitle><![CDATA[像竹子一样成长]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-05-16T05:42:58.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Bambooleaf]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[package.json详解]]></title>
    <link href="http://yoursite.com/2015/05/16/package-json%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2015/05/16/package-json详解/</id>
    <published>2015-05-16T02:12:41.000Z</published>
    <updated>2015-05-16T05:42:58.000Z</updated>
    <content type="html"><![CDATA[<h1 id="package-json文件详解">package.json文件详解</h1><h2 id="name">name</h2><p><strong>必须</strong> 字段<br>下面是官方的建议：</p>
<ul>
<li>名字里不要再包含”js”和”node”，因为默认NPM包就是node.js程序，不过你可以通过engines字段来指定。</li>
<li>名字将会被作为url的一部分，所有要符合http url的一般命名规则，不能包含url非法字符，也不能以.和_开头。</li>
<li>名字也将作为require()命令的参数，所以应该尽量简明。</li>
<li>如果包要发布到NPM平台上的话，最好先检查下有没有重名, 并且字母只能全部小写。<br>新版本的NPM可以指定scope, 名字可以加前缀标识，如@ijse/mypackage。</li>
</ul>
<a id="more"></a>
<h2 id="version">version</h2><p><strong>必须</strong> 字段<br>在package.json中最重要的就是name和version字段。他们都是必须的，如果没有就无法install。name和version一起组成的标识在假设中是唯一的。改变包应该同时改变version。</p>
<p>version必须能被 <a href="https://github.com/npm/node-semver" target="_blank" rel="external">node-semver</a>解析，它被包在npm的依赖中。（要自己用可以执行npm install semver）</p>
<p>更多可用的“数字”或者“范围”见<a href="https://docs.npmjs.com/misc/semver" target="_blank" rel="external">semver(7)</a>.</p>
<h2 id="description">description</h2><p>可选字段<br>包的描述信息，将会在npm search的返回结果中显示，以帮助用户选择合适的包。</p>
<h2 id="keywords">keywords</h2><p>可选字段<br>包的关键词信息，是一个字符串数组，同上也将显示在npm search的结果中。</p>
<h2 id="homepage">homepage</h2><p>可选字段<br><strong>没有</strong> <a href="http://等带协议前缀的URL。" target="_blank" rel="external">http://等带协议前缀的URL。</a></p>
<h2 id="bugs">bugs</h2><p>可选字段<br>你项目的提交问题的url和（或）邮件地址。</p>
<blockquote>
<p>bugs: {<br> “url”: “<a href="http://github.com/ijse/project/issues" target="_blank" rel="external">http://github.com/ijse/project/issues</a>“,<br> “email”: “my@ijser.cn”<br>}</p>
</blockquote>
<h2 id="license">license</h2><p>可选字段<br>包的开源协议名称<br>如果是使用一个普遍的license，比如BSD-3-Clause或MIT，直接使用：</p>
<blockquote>
<p>{ “license” :”BSD-3-Clause”}</p>
</blockquote>
<p>如果你有更复杂的许可条件，或者想要提供给更多地细节，可以这样:</p>
<blockquote>
<p>“licenses” : [<br>  { “type” : “MyLicense”<br>  , “url” : “<a href="http://github.com/owner/project/path/to/license" target="_blank" rel="external">http://github.com/owner/project/path/to/license</a>“<br>  }<br>]</p>
</blockquote>
<h2 id="author">author</h2><p>可选字段<br>包的作者，可以是字符串或对象</p>
<blockquote>
<p>author: {<br>  “name”: “ijse”,<br>  “email”: “my@ijse.cn”,<br>  “url”: “<a href="http://www.ijser.cn" target="_blank" rel="external">http://www.ijser.cn</a>“<br>}</p>
</blockquote>
<p>或者</p>
<blockquote>
<p>author: “ijse <a href="&#x6d;&#x61;&#105;&#108;&#116;&#x6f;&#58;&#x6d;&#x79;&#x40;&#105;&#x6a;&#115;&#101;&#x72;&#46;&#99;&#110;">&#x6d;&#x79;&#x40;&#105;&#x6a;&#115;&#101;&#x72;&#46;&#99;&#110;</a> (<a href="http://www.ijser.cn" target="_blank" rel="external">http://www.ijser.cn</a>)”  </p>
</blockquote>
<h2 id="contributors">contributors</h2><p>可选字段<br>包的贡献者，是一个数组</p>
<h2 id="files">files</h2><p>可选字段<br>包所包含的所有文件，可以取值为文件夹。</p>
<p>通常我们还是用.npmignore来去除不想包含到包里的文件。</p>
<h2 id="main">main</h2><p>可选字段<br>这个字段的值是你程序主入口模块的ID。如果其他用户需要你的包，当用户调用require()方法时，返回的就是这个模块的导出（exports）。</p>
<h2 id="bin">bin</h2><p>可选字段<br>如果你的包里包含可执行文件，通过设置这个字段可以将它们包含到系统的PATH中，这样直接就可以运行，很方便。如：</p>
<blockquote>
<p>“bin”: {<br>  “iapp”: “./cli.js”<br>}</p>
</blockquote>
<p>当包被安装后，NPM将创建一个cli.js文件的链接到/usr/local/bin/iapp下。</p>
<h2 id="man">man</h2><p>为系统的man命令提供帮助文档, 如：</p>
<blockquote>
<p>“man”: “./man/doc.1”</p>
</blockquote>
<p>帮助文件的文件名必须以数字结尾，如果是压缩的，需要以.gz结尾。</p>
<p>如果是字符串数组：</p>
<blockquote>
<p>“name”: “foo”,<br>“man”: [“./man/foo.1”, “./man/bar.1”, “./man/foo.2” ]</p>
</blockquote>
<p>则分别可以man foo, man foo-bar, man 2 foo来查看。</p>
<h2 id="directories">directories</h2><p>CommonJS包所要求的目录结构信息，目前除了告诉别人你的程序目录结构，貌似没有别的什么用。<br>下级字段可以是：lib, bin, man, doc, example。 每个都是字符串</p>
<h2 id="repository">repository</h2><p>可选字段<br>用于指示代码存放的位置</p>
<blockquote>
<p>“repository” :<br>  { “type” : “git”<br>  , “url” : “<a href="http://github.com/npm/npm.git" target="_blank" rel="external">http://github.com/npm/npm.git</a>“<br>  }<br>“repository” :<br>  { “type” : “svn”<br>  , “url” : “<a href="http://v8.googlecode.com/svn/trunk/" target="_blank" rel="external">http://v8.googlecode.com/svn/trunk/</a>“<br>  }</p>
</blockquote>
<h2 id="script">script</h2><p>“scripts”是一个由脚本命令组成的hash对象，他们在包不同的生命周期中被执行。key是生命周期事件，value是要运行的命令。</p>
<p>参见 <a href="https://docs.npmjs.com/misc/scripts" target="_blank" rel="external">npm-scripts(7)</a></p>
<h2 id="config">config</h2><p>可选字段<br>添加一些设置，可以供scripts读取用，同时这里的值也会被添加到系统的环境变量中。</p>
<blockquote>
<p>“name”: “foo”,<br>“config”: {<br>  “port”: “8080”<br>}</p>
</blockquote>
<p>npm start的时候会读取到npm_package_config_port环境变量。</p>
<p>同时也可以使用npm config命令来修改设置：</p>
<blockquote>
<p>npm config set foo:port 8001  </p>
</blockquote>
<h2 id="dependencies">dependencies</h2><p>可选字段<br>指定依赖的其它包，这些依赖是指包发布后正常执行时所需要的，如果是开发中依赖的包，可以在devDependencies设置。</p>
<p>通常使用下面命令来安装：</p>
<blockquote>
<p>npm install —save otherpackage  </p>
</blockquote>
<p>形式可以有如下多种：</p>
<ul>
<li>version 严格匹配某个版本</li>
<li><blockquote>
<p>version 必须大于某个版本</p>
</blockquote>
</li>
<li><blockquote>
<p>=version</p>
</blockquote>
</li>
<li>&lt;version</li>
<li>&lt;=version</li>
<li>~version 大概匹配某个版本</li>
<li>^version 兼容某个版本</li>
<li>1.2.x 可以是1.2.0, 1.2.1等等，但不能是1.3.0</li>
<li>http://… 指定tarball的url地址</li>
<li><ul>
<li>任何版本都可以</li>
</ul>
</li>
<li>“” 同上</li>
<li>version1 - version2 &gt;=version1 &lt;=version2</li>
<li>range1 || range2 满足range1 或range2</li>
<li>git://… git地址</li>
<li>user/repo 同上</li>
<li>tag 指定某个tag的版本</li>
<li>path/path 本地包所有文件夹</li>
</ul>
<p>下面都是可以用的：</p>
<blockquote>
<p>{ “dependencies” :<br>  { “foo” : “1.0.0 - 2.9999.9999”<br>  , “bar” : “&gt;=1.0.2 <2.1.2" ,="" "baz"="" :="" "="">1.0.2 &lt;=2.3.4”<br>  , “boo” : “2.0.1”<br>  , “qux” : “<1.0.0 ||="">=2.3.1 <2.4.5 ||="">=2.5.2 &lt;3.0.0”<br>  , “asd” : “<a href="http://asdf.com/asdf.tar.gz" target="_blank" rel="external">http://asdf.com/asdf.tar.gz</a>“<br>  , “til” : “~1.2”<br>  , “elf” : “~1.2.3”<br>  , “two” : “2.x”<br>  , “thr” : “3.3.x”<br>  , “lat” : “latest”<br>  , “dyl” : “file:../dyl”<br>  }<br>}</2.4.5></1.0.0></2.1.2"></p>
</blockquote>
<p>Git URL可以有如下种形式：</p>
<blockquote>
<p>git://github.com/user/project.git#commit-ish<br>git+ssh://user@hostname:project.git#commit-ish<br>git+ssh://user@hostname/project.git#commit-ish<br>git+<a href="http://user@hostname/project/blah.git#commit-ish" target="_blank" rel="external">http://user@hostname/project/blah.git#commit-ish</a><br>git+<a href="https://user@hostname/project/blah.git#commit-ish" target="_blank" rel="external">https://user@hostname/project/blah.git#commit-ish</a>  </p>
</blockquote>
<h2 id="devdependencies">devdependencies</h2><p>这些依赖只有在开发时候才需要。</p>
<blockquote>
<p>npm install —save-dev mypack  </p>
</blockquote>
<h2 id="peerDependencies">peerDependencies</h2><p>相关的依赖，如果你的包是插件，而用户在使用你的包时候，通常也会需要这些依赖（插件），那么可以将依赖列到这里。</p>
<p>举个例子，如karma, 它的package.json中有设置：</p>
<blockquote>
<p>“peerDependencies”: {<br>  “karma-jasmine”: “~0.1.0”,<br>  “karma-requirejs”: “~0.2.0”,<br>  “karma-coffee-preprocessor”: “~0.1.0”,<br>  “karma-html2js-preprocessor”: “~0.1.0”,<br>  “karma-chrome-launcher”: “~0.1.0”,<br>  “karma-firefox-launcher”: “~0.1.0”,<br>  “karma-phantomjs-launcher”: “~0.1.0”,<br>  “karma-script-launcher”: “~0.1.0”<br>}</p>
</blockquote>
<p>这些都是karma的相关插件，一般使用karma的时候都会需要。</p>
<h2 id="bundledDependencies">bundledDependencies</h2><p>绑定的依赖包，发布的时候这些绑定包也会被一同发布。</p>
<h2 id="optionalDependencies">optionalDependencies</h2><p>即使这些依赖没有，也可以正常安装使用</p>
<h2 id="engines">engines</h2><p>指定包运行的环境</p>
<blockquote>
<p>“engines”: {<br>  “node”: “&gt;=0.10.3 &lt; 0.12”,<br>  “npm”: “~1.0.20”<br>}</p>
</blockquote>
<h2 id="engineStrict">engineStrict</h2><p>设置为true强制限定 engine</p>
<h2 id="os">os</h2><p>指定你的包可以在哪些系统平台下运行。</p>
<blockquote>
<p>“os”: [ “darwin”, “linux”, “!win32” ]</p>
</blockquote>
<p>即可以在darwin和linux平台下运行，而不能在win32下。这里设定的取值是来自process.platform的。</p>
<h2 id="cpu">cpu</h2><p>可以指定包运行的cpu架构，如</p>
<blockquote>
<p>“cpu”: [ “x64”, “!arm” ]</p>
</blockquote>
<p>取值来自process.arch。</p>
<h2 id="preferGlobal">preferGlobal</h2><p>如果你的包是命令行运行的，那可以将其设置为true建议用户全局(npm install -g)安装。但它并不强制用户。</p>
<h2 id="private">private</h2><p>设为true这个包将不会发布到NPM平台下。</p>
<h2 id="publishConfig">publishConfig</h2><p>这个字段用于设置发布时候的一些设定。尤其方便你希望发布前设定指定的tag或registry。</p>
<p>也可以设定其它子字段，但只有tag和registry会影响到发布。</p>
<h2 id="默认值">默认值</h2><ul>
<li><p>“scripts”: { “start”: “node server.js” } 如果在项目根目录下含有server.js文件，则NPM会自动设置此值。</p>
</li>
<li><p>“scripts”: { “preinstall”: “node-gyp rebuild” }</p>
</li>
</ul>
<p>如果在项目根目录下含有binding.gyp文件，则NPM会自动设置此值。</p>
<ul>
<li>“contributors”: […]</li>
</ul>
<p>如果项目根目录下含有AUTHORS文件，则NPM会自动将每一行以Name <email> (url)的格式读取并设定此字段。</email></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="package-json文件详解">package.json文件详解</h1><h2 id="name">name</h2><p><strong>必须</strong> 字段<br>下面是官方的建议：</p>
<ul>
<li>名字里不要再包含”js”和”node”，因为默认NPM包就是node.js程序，不过你可以通过engines字段来指定。</li>
<li>名字将会被作为url的一部分，所有要符合http url的一般命名规则，不能包含url非法字符，也不能以.和_开头。</li>
<li>名字也将作为require()命令的参数，所以应该尽量简明。</li>
<li>如果包要发布到NPM平台上的话，最好先检查下有没有重名, 并且字母只能全部小写。<br>新版本的NPM可以指定scope, 名字可以加前缀标识，如@ijse/mypackage。</li>
</ul>]]>
    
    </summary>
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
      <category term="package.json" scheme="http://yoursite.com/tags/package-json/"/>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo博客建立全过程]]></title>
    <link href="http://yoursite.com/2015/05/15/hexo-procedure/"/>
    <id>http://yoursite.com/2015/05/15/hexo-procedure/</id>
    <published>2015-05-15T13:19:26.000Z</published>
    <updated>2015-05-15T16:45:25.000Z</updated>
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>忘记了具体是怎么接触到nodejs的，只是感觉通过nodejs真切感觉到了，以后前端开发将会是趋势，所以也想着加入到前端开发的行列中来，在网上查询nodejs的学习路径，看见了使用Hexo搭建个人博客这么一条，于是便学着搭建起来一个，顺便以此作为学习的起点，网上的教程博客很多，一下的只是我个人操作的时候使用到 地方，趁着刚刚做完，还记得不少，就赶紧记录了下来。<br>顺便一提，由于nodejs的开发环境推荐使用Linux或者Mac OS X下进行，同时本人穷小子一个，所以就毫不犹豫的自己装了个虚拟机，在linux上进行开发了，所以一下所处环境都是在虚拟机里的ubuntu下进行的</p>
<a id="more"></a>
<h1 id="github">github</h1><p>github相信即使没用过，大家也都听过，目前非常多且著名的开源项目都托管在这里，而且由于其免费提供300M空间，目前在天朝也没有被墙，也能顺便学习一下git，所以想要找到一个免费的静态博客托管服务器，github毫无疑问是最佳选择之一。</p>
<h2 id="配置和使用_github">配置和使用 github</h2><p>首先，注册一个<a href="https://github.com/" target="_blank" rel="external">github</a>帐号</p>
<h3 id="配置SSH_keys">配置SSH keys</h3><p>我们如何让本地git项目与远程的github建立联系呢？用SSH keys。</p>
<blockquote>
<p>cd ~/. ssh   检查本机的ssh密钥<br>ssh-keygen -t rsa -C “邮件地址@youremail.com” 生成新密钥<br>Generating public/private rsa key pair.<br>Enter file in which to save the key &gt;(/Users/your_user_directory/.ssh/id_rsa):&lt;回车就好&gt;</p>
<p>注意1: 此处的邮箱地址，你可以输入自己的邮箱地址；<br>注意2: 此处的「-C」的是大写的「C」</p>
</blockquote>
<p>然后系统会要你输入密码：</p>
<blockquote>
<p>Enter passphrase (empty for no passphrase):&lt;输入加密串&gt;<br>Enter same passphrase again:&lt;再次输入加密串&gt;</p>
</blockquote>
<p>如果出现下面的画面，就是配置成功了<br><img src="http://pic.yupoo.com/vankos_v/DKi6S7PO/lpjsl.png" alt="密钥生成成功"></p>
<h3 id="添加SSH_Key到GitHub">添加SSH Key到GitHub</h3><ul>
<li>打开本地~/.ssh/id_rsa.pub文件。此文件里面内容为刚才生成人密钥。准确的复制这个文件的内容，才能保证设置的成功。</li>
<li>登陆github系统。点击右上角的 Account Settings—-&gt;SSH Public keys —-&gt; add another public keys</li>
<li>把你本地生成的密钥复制到里面（key文本框中）， 点击 add key 就ok了</li>
</ul>
<p>可以输入下面的命令，看看设置是否成功，git@github.com的部分不要修改：</p>
<blockquote>
<p>$ ssh -T git@github.com</p>
</blockquote>
<p>如果是下面的反馈：</p>
<blockquote>
<p>The authenticity of host ‘github.com (207.97.227.239)’ can’t be &gt;established.<br>RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.<br>Are you sure you want to continue connecting (yes/no)?</p>
</blockquote>
<p>不要紧张，输入yes就好，然后会看到：</p>
<blockquote>
<p>Hi cnfeat! You’ve successfully authenticated, but GitHub does not &gt;provide shell access.</p>
</blockquote>
<p>最后</p>
<blockquote>
<p>git config —global user.name “cnfeat”//用户名<br>git config —global user.email  “cnfeat@gmail.com”//填写自己的邮箱</p>
</blockquote>
<p>至此，与github的链接建立完成</p>
<h3 id="使用GitHub_Pages建立博客">使用GitHub Pages建立博客</h3><p>与GitHub建立好链接之后，就可以方便的使用它提供的Pages服务，GitHub Pages分两种，一种是你的GitHub用户名建立的username.github.io这样的用户&amp;组织页（站），另一种是依附项目的pages。</p>
<p>想建立个人博客是用的第一种，形如cnfeat.github.io这样的可访问的站，每个用户名下面只能建立一个。<br>具体流程可以参考<a href="http://www.pchou.info/web-build/2013/01/05/build-github-blog-page-02.html" target="_blank" rel="external">一步步在GitHub上创建博客主页(2)</a></p>
<h1 id="nodejs">nodejs</h1><p>目前国内比较活跃的是<a href="https://cnodejs.org/" target="_blank" rel="external">Cnode社区</a>，有兴趣的可以去转转。<br>我是通过nvm安装node的</p>
<blockquote>
<p>cd ~/git<br>git clone <a href="https://github.com/cnpm/nvm.git" target="_blank" rel="external">https://github.com/cnpm/nvm.git</a><br>source ~/git/nvm/nvm.sh</p>
</blockquote>
<p>然后就可以安装任意版本的nodejs了</p>
<blockquote>
<p>nvm install 0.12.0</p>
</blockquote>
<p>具体可参考社区里新手教学的<a href="http://fengmk2.com/blog/2014/03/node-env-and-faster-npm.html" target="_blank" rel="external">快速搭建 Node.js / io.js 开发环境以及加速 npm</a></p>
<h1 id="hexo">hexo</h1><p>Hexo的作者是<a href="https://github.com/tommy351" target="_blank" rel="external">tommy351</a>，根据<a href="http://hexo.io/docs/index.html" target="_blank" rel="external">官方介绍</a>，Hexo是一个简单、快速、强大的博客发布工具，支持Markdown格式。</p>
<h2 id="安装hexo">安装hexo</h2><p>找到一个路径，新建一个文件夹，比如我的就叫做Hexo。进入此路径后</p>
<blockquote>
<p>npm install -g hexo<br>hexo init</p>
</blockquote>
<p>成功后此路径下就会多出一个完整的hexo项目。</p>
<blockquote>
<p>hexo g<br>hexo s</p>
</blockquote>
<p>浏览器输入<a href="http://localhost:4000，查看搭建效果。" target="_blank" rel="external">http://localhost:4000，查看搭建效果。</a></p>
<p>PS：这个安装方法我使用后只能在这个Hexo目录下有效，这么设置成全局的我没有研究<br>常用命令如下：</p>
<blockquote>
<p>hexo new “postName” #新建文章<br>hexo new page “pageName” #新建页面<br>hexo generate #生成静态页面至public目录<br>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br>hexo deploy #将.deploy目录部署到GitHub</p>
</blockquote>
<p>也可以简写：</p>
<blockquote>
<p>hexo n == hexo new<br>hexo g == hexo generate<br>hexo s == hexo server<br>hexo d == hexo deploy</p>
</blockquote>
<h2 id="克隆主题">克隆主题</h2><p>成功以后，你会发现在你的目录下有个themes的文件夹，这个就是hexo的主题，你可以通过修改配置文件_config.yml中的theme的值来确定使用哪个主题。主题的下载地址是<a href="http://hexo.io/themes/,当然也有很多不错的主题并没有在这个页面里，需要你去一下论坛或什么地方找了，比如我现在使用的主题是https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">http://hexo.io/themes/,当然也有很多不错的主题并没有在这个页面里，需要你去一下论坛或什么地方找了，比如我现在使用的主题是https://github.com/litten/hexo-theme-yilia</a></p>
<p>具体使用起来很简单</p>
<blockquote>
<p>git clone <a href="https://github.com/litten/hexo-theme-yilia.git" target="_blank" rel="external">https://github.com/litten/hexo-theme-yilia.git</a> themes/yilia</p>
</blockquote>
<p>然后你的themes文件夹下就多了个yilia的文件夹，修改_config.yml中的theme的就可以选定你要用的主题了，你可以多下载几个都试试效果，然后再确定最后使用谁的。<br>最后推荐一个学习hexo具体配置的地方<br><a href="http://zipperary.com/categories/hexo/" target="_blank" rel="external">http://zipperary.com/categories/hexo/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="前言">前言</h1><p>忘记了具体是怎么接触到nodejs的，只是感觉通过nodejs真切感觉到了，以后前端开发将会是趋势，所以也想着加入到前端开发的行列中来，在网上查询nodejs的学习路径，看见了使用Hexo搭建个人博客这么一条，于是便学着搭建起来一个，顺便以此作为学习的起点，网上的教程博客很多，一下的只是我个人操作的时候使用到 地方，趁着刚刚做完，还记得不少，就赶紧记录了下来。<br>顺便一提，由于nodejs的开发环境推荐使用Linux或者Mac OS X下进行，同时本人穷小子一个，所以就毫不犹豫的自己装了个虚拟机，在linux上进行开发了，所以一下所处环境都是在虚拟机里的ubuntu下进行的</p>]]>
    
    </summary>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[个人博客开通]]></title>
    <link href="http://yoursite.com/2015/05/13/hello%20world/"/>
    <id>http://yoursite.com/2015/05/13/hello world/</id>
    <published>2015-05-12T16:10:11.000Z</published>
    <updated>2015-05-13T16:00:32.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xj22g.com1.z0.glb.clouddn.com/blog_dabai2.jpg" alt="大白"></p>
<a id="more"></a>
<p>对于一个不懂nodejs,不会linux，没用过github的小菜鸟，经过不懈的努力，终于成功搭建起了基于hexo的个人博客，作为一名程序员，怎能没有自己的个人博客？不过话说回来，人与人的差距真是很大啊，这些hexo主题作者一个比一个年轻，个个是大牛……<br>后续我会在这里详细记录下我的开发流程，在这里开始nodejs的学习之旅，也会在这里记录下我的学习与生活的点滴。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xj22g.com1.z0.glb.clouddn.com/blog_dabai2.jpg" alt="大白"></p>]]>
    
    </summary>
    
      <category term="hello world" scheme="http://yoursite.com/tags/hello-world/"/>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>